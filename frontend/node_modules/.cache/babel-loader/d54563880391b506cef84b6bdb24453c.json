{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._handleResponse = response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return Promise.reject(response.status);\n      }\n    };\n\n    this._address = options._address;\n    this._token = options._token;\n    this._cohortId = options._cohortId;\n  }\n\n  _makeRequest(endpoint, method, body) {\n    const fetchInit = {\n      method: method,\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch(`${this.address}/${this.cohortId}/${endpoint}`, body ? { ...fetchInit,\n      body: JSON.stringify(body)\n    } : fetchInit).then(this._handleResponse);\n  }\n\n  getUserInfo() {\n    return this._makeRequest('users/me', 'GET');\n  }\n\n  getInitialCards() {\n    return this._makeRequest('cards', 'GET');\n  }\n\n  updateUserInfo(userInfo) {\n    return this._makeRequest('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar(avatar) {\n    return this._makeRequest('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard(cardData) {\n    return this._makeRequest('cards', 'POST', cardData);\n  }\n\n  likeCard(cardID, isLiked) {\n    return this._makeRequest(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard(cardID) {\n    return this._makeRequest(`cards/${cardID}`, 'DELETE');\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24'\n});\nexport default api;","map":{"version":3,"sources":["/Users/tatananovikova/Desktop/praktikum/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_handleResponse","response","ok","json","Promise","reject","status","_address","_token","_cohortId","_makeRequest","endpoint","method","body","fetchInit","headers","authorization","token","fetch","address","cohortId","JSON","stringify","then","getUserInfo","getInitialCards","updateUserInfo","userInfo","updateAvatar","avatar","addNewCard","cardData","likeCard","cardID","isLiked","deleteCard","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,SAMrBC,eANqB,GAMFC,QAAD,IAAc;AAC9B,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,eAAOC,OAAO,CAACC,MAAR,CAAeJ,QAAQ,CAACK,MAAxB,CAAP;AACD;AACF,KAZoB;;AACnB,SAAKC,QAAL,GAAgBR,OAAO,CAACQ,QAAxB;AACA,SAAKC,MAAL,GAAcT,OAAO,CAACS,MAAtB;AACA,SAAKC,SAAL,GAAiBV,OAAO,CAACU,SAAzB;AACD;;AAUDC,EAAAA,YAAY,CAAEC,QAAF,EAAYC,MAAZ,EAAoBC,IAApB,EAA0B;AACpC,UAAMC,SAAS,GAAG;AAChBF,MAAAA,MAAM,EAAEA,MADQ;AAEhBG,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,KAAKC,KADb;AAEP,wBAAgB;AAFT;AAFO,KAAlB;AAOA,WAAOC,KAAK,CACT,GAAE,KAAKC,OAAQ,IAAG,KAAKC,QAAS,IAAGT,QAAS,EADnC,EAEVE,IAAI,GAAG,EAAE,GAAGC,SAAL;AAAgBD,MAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAeT,IAAf;AAAtB,KAAH,GAAkDC,SAF5C,CAAL,CAGNS,IAHM,CAIL,KAAKvB,eAJA,CAAP;AAMD;;AAEDwB,EAAAA,WAAW,GAAI;AACb,WAAO,KAAKd,YAAL,CAAkB,UAAlB,EAA8B,KAA9B,CAAP;AACD;;AAEDe,EAAAA,eAAe,GAAI;AACjB,WAAO,KAAKf,YAAL,CAAkB,OAAlB,EAA2B,KAA3B,CAAP;AACD;;AAEDgB,EAAAA,cAAc,CAAEC,QAAF,EAAY;AACxB,WAAO,KAAKjB,YAAL,CAAkB,UAAlB,EAA8B,OAA9B,EAAuCiB,QAAvC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAEC,MAAF,EAAU;AACpB,WAAO,KAAKnB,YAAL,CAAkB,iBAAlB,EAAqC,OAArC,EAA8CmB,MAA9C,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEC,QAAF,EAAY;AACpB,WAAO,KAAKrB,YAAL,CAAkB,OAAlB,EAA2B,MAA3B,EAAmCqB,QAAnC,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AACzB,WAAO,KAAKxB,YAAL,CAAmB,eAAcuB,MAAO,EAAxC,EAA2CC,OAAO,GAAG,QAAH,GAAc,KAAhE,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEF,MAAF,EAAU;AAClB,WAAO,KAAKvB,YAAL,CAAmB,SAAQuB,MAAO,EAAlC,EAAqC,QAArC,CAAP;AACD;;AAzDO;;AA4DV,MAAMG,GAAG,GAAG,IAAIvC,GAAJ,CAAS;AACnBsB,EAAAA,OAAO,EAAE,mCADU;AAEnBF,EAAAA,KAAK,EAAE,sCAFY;AAGnBG,EAAAA,QAAQ,EAAE;AAHS,CAAT,CAAZ;AAMA,eAAegB,GAAf","sourcesContent":["class Api {\n  constructor(options) {\n    this._address = options._address;\n    this._token = options._token;\n    this._cohortId = options._cohortId;\n  }\n\n  _handleResponse = (response) => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      return Promise.reject(response.status);\n    }\n  }\n\n  _makeRequest (endpoint, method, body) {\n    const fetchInit = {\n      method: method,  \n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch (\n      `${this.address}/${this.cohortId}/${endpoint}`,\n      body ? { ...fetchInit, body: JSON.stringify(body) } : fetchInit)\n    .then (\n      this._handleResponse\n    )\n  }\n\n  getUserInfo () {\n    return this._makeRequest('users/me', 'GET');\n  }\n  \n  getInitialCards () {\n    return this._makeRequest('cards', 'GET');\n  }\n\n  updateUserInfo (userInfo) {\n    return this._makeRequest('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar (avatar) {\n    return this._makeRequest('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard (cardData) {\n    return this._makeRequest('cards', 'POST', cardData);\n  }\n\n  likeCard (cardID, isLiked) {\n    return this._makeRequest(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard (cardID) {\n    return this._makeRequest(`cards/${cardID}`, 'DELETE');\n  }\n}\n\nconst api = new Api ({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24',\n})\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}