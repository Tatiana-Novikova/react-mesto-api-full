{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._handleResponse = response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return Promise.reject(response.status);\n      }\n    };\n\n    this._makeRequest = ({\n      endpoint,\n      method,\n      body\n    }) => {\n      const fetchInit = {\n        method: method,\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        }\n      };\n      return fetch(`${this._address}/${this._cohortId}/${endpoint}`, body ? { ...fetchInit,\n        body: JSON.stringify(body)\n      } : fetchInit).then(this._handleResponse);\n    };\n\n    this._address = options.address;\n    this._token = options.token;\n    this._cohortId = options.cohortId;\n  }\n\n  getUserInfo() {\n    return this._makeRequest('users/me', 'GET');\n  }\n\n  getInitialCards() {\n    return this._makeRequest('cards', 'GET');\n  }\n\n  updateUserInfo(userInfo) {\n    return this._makeRequest('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar(avatar) {\n    return this._makeRequest('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard(cardData) {\n    return this._makeRequest('cards', 'POST', cardData);\n  }\n\n  likeCard(cardID, isLiked) {\n    return this._makeRequest(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard(cardID) {\n    return this._makeRequest(`cards/${cardID}`, 'DELETE');\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24'\n});\nexport default api;","map":{"version":3,"sources":["/Users/tatananovikova/Desktop/praktikum/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_handleResponse","response","ok","json","Promise","reject","status","_makeRequest","endpoint","method","body","fetchInit","headers","authorization","_token","fetch","_address","_cohortId","JSON","stringify","then","address","token","cohortId","getUserInfo","getInitialCards","updateUserInfo","userInfo","updateAvatar","avatar","addNewCard","cardData","likeCard","cardID","isLiked","deleteCard","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,SAMrBC,eANqB,GAMFC,QAAD,IAAc;AAC9B,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,eAAOC,OAAO,CAACC,MAAR,CAAeJ,QAAQ,CAACK,MAAxB,CAAP;AACD;AACF,KAZoB;;AAAA,SAcrBC,YAdqB,GAcN,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,KAAD,KAAgC;AAC7C,YAAMC,SAAS,GAAG;AAChBF,QAAAA,MAAM,EAAEA,MADQ;AAEhBG,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE,KAAKC,MADb;AAEP,0BAAgB;AAFT;AAFO,OAAlB;AAOA,aAAOC,KAAK,CACT,GAAE,KAAKC,QAAS,IAAG,KAAKC,SAAU,IAAGT,QAAS,EADrC,EAEVE,IAAI,GAAG,EAAE,GAAGC,SAAL;AAAgBD,QAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAeT,IAAf;AAAtB,OAAH,GAAkDC,SAF5C,CAAL,CAGNS,IAHM,CAIL,KAAKpB,eAJA,CAAP;AAMD,KA5BoB;;AACnB,SAAKgB,QAAL,GAAgBjB,OAAO,CAACsB,OAAxB;AACA,SAAKP,MAAL,GAAcf,OAAO,CAACuB,KAAtB;AACA,SAAKL,SAAL,GAAiBlB,OAAO,CAACwB,QAAzB;AACD;;AA0BDC,EAAAA,WAAW,GAAI;AACb,WAAO,KAAKjB,YAAL,CAAkB,UAAlB,EAA8B,KAA9B,CAAP;AACD;;AAEDkB,EAAAA,eAAe,GAAI;AACjB,WAAO,KAAKlB,YAAL,CAAkB,OAAlB,EAA2B,KAA3B,CAAP;AACD;;AAEDmB,EAAAA,cAAc,CAAEC,QAAF,EAAY;AACxB,WAAO,KAAKpB,YAAL,CAAkB,UAAlB,EAA8B,OAA9B,EAAuCoB,QAAvC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAEC,MAAF,EAAU;AACpB,WAAO,KAAKtB,YAAL,CAAkB,iBAAlB,EAAqC,OAArC,EAA8CsB,MAA9C,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEC,QAAF,EAAY;AACpB,WAAO,KAAKxB,YAAL,CAAkB,OAAlB,EAA2B,MAA3B,EAAmCwB,QAAnC,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AACzB,WAAO,KAAK3B,YAAL,CAAmB,eAAc0B,MAAO,EAAxC,EAA2CC,OAAO,GAAG,QAAH,GAAc,KAAhE,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEF,MAAF,EAAU;AAClB,WAAO,KAAK1B,YAAL,CAAmB,SAAQ0B,MAAO,EAAlC,EAAqC,QAArC,CAAP;AACD;;AAzDO;;AA4DV,MAAMG,GAAG,GAAG,IAAIvC,GAAJ,CAAS;AACnBwB,EAAAA,OAAO,EAAE,mCADU;AAEnBC,EAAAA,KAAK,EAAE,sCAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAAT,CAAZ;AAMA,eAAea,GAAf","sourcesContent":["class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._token = options.token;\n    this._cohortId = options.cohortId;\n  }\n\n  _handleResponse = (response) => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      return Promise.reject(response.status);\n    }\n  }\n\n  _makeRequest = ({ endpoint, method, body }) => {\n    const fetchInit = {\n      method: method,  \n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch (\n      `${this._address}/${this._cohortId}/${endpoint}`,\n      body ? { ...fetchInit, body: JSON.stringify(body) } : fetchInit)\n    .then (\n      this._handleResponse\n    )\n  }\n\n  getUserInfo () {\n    return this._makeRequest('users/me', 'GET');\n  }\n  \n  getInitialCards () {\n    return this._makeRequest('cards', 'GET');\n  }\n\n  updateUserInfo (userInfo) {\n    return this._makeRequest('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar (avatar) {\n    return this._makeRequest('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard (cardData) {\n    return this._makeRequest('cards', 'POST', cardData);\n  }\n\n  likeCard (cardID, isLiked) {\n    return this._makeRequest(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard (cardID) {\n    return this._makeRequest(`cards/${cardID}`, 'DELETE');\n  }\n}\n\nconst api = new Api ({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24',\n})\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}