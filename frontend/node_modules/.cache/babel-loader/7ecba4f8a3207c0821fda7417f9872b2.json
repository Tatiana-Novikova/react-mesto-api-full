{"ast":null,"code":"function Api({\n  _address,\n  _token,\n  _cohortId\n}) {\n  const _checkResponse = res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  };\n\n  const _makeRequest = ({\n    endpoint,\n    method,\n    body\n  }) => {\n    const fetchInit = {\n      method: method,\n      headers: {\n        authorization: _token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch(`${_address}/${_cohortId}/${endpoint}`, body ? { ...fetchInit,\n      body: JSON.stringify(body)\n    } : fetchInit).then(_checkResponse);\n  };\n\n  const getUserInfo = () => {\n    return _makeRequest({\n      endpoint: 'users/me',\n      method: 'GET'\n    });\n  };\n\n  const getInitialCards = () => {\n    return _makeRequest({\n      endpoint: 'cards',\n      method: 'GET'\n    });\n  };\n\n  const updateUserInfo = userInfo => {\n    return _makeRequest({\n      endpoint: 'users/me',\n      method: 'PATCH',\n      body: userInfo\n    });\n  };\n\n  const updateAvatar = avatar => {\n    return _makeRequest({\n      endpoint: 'users/me/avatar',\n      method: 'PATCH',\n      body: avatar\n    });\n  };\n\n  const addNewCard = cardData => {\n    return _makeRequest({\n      endpoint: 'cards',\n      method: 'POST',\n      body: cardData\n    });\n  };\n\n  const changeLikeCardStatus = (cardID, isLiked) => {\n    return _makeRequest({\n      endpoint: `cards/likes/${cardID}`,\n      method: `${isLiked ? 'DELETE' : 'PUT'}`\n    });\n  };\n\n  const deleteCard = cardID => {\n    return _makeRequest({\n      endpoint: `cards/${cardID}`,\n      method: 'DELETE'\n    });\n  };\n}\n\n_c = Api;\nexport const api = Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24'\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Api\");","map":{"version":3,"sources":["/Users/tatananovikova/Desktop/praktikum/react-mesto-auth/src/utils/api.js"],"names":["Api","_address","_token","_cohortId","_checkResponse","res","ok","json","Promise","reject","status","_makeRequest","endpoint","method","body","fetchInit","headers","authorization","fetch","JSON","stringify","then","getUserInfo","getInitialCards","updateUserInfo","userInfo","updateAvatar","avatar","addNewCard","cardData","changeLikeCardStatus","cardID","isLiked","deleteCard","api","address","token","cohortId"],"mappings":"AAAA,SAASA,GAAT,CAAa;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA;AAApB,CAAb,EAA8C;AAE5C,QAAMC,cAAc,GAAIC,GAAD,IAAS;AAC9B,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAFD,MAEO;AACL,aAAOC,OAAO,CAACC,MAAR,CAAeJ,GAAG,CAACK,MAAnB,CAAP;AACD;AACF,GAND;;AAQA,QAAMC,YAAY,GAAG,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAD,KAAgC;AACnD,UAAMC,SAAS,GAAG;AAChBF,MAAAA,MAAM,EAAEA,MADQ;AAEhBG,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEf,MADR;AAEP,wBAAgB;AAFT;AAFO,KAAlB;AAOA,WAAOgB,KAAK,CACT,GAAEjB,QAAS,IAAGE,SAAU,IAAGS,QAAS,EAD3B,EAEVE,IAAI,GACA,EAAE,GAAGC,SAAL;AAAgBD,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAAtB,KADA,GAEAC,SAJM,CAAL,CAMNM,IANM,CAOLjB,cAPK,CAAP;AASD,GAjBD;;AAmBA,QAAMkB,WAAW,GAAG,MAAM;AACxB,WAAOX,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAE,UADQ;AAElBC,MAAAA,MAAM,EAAE;AAFU,KAAD,CAAnB;AAID,GALD;;AAOA,QAAMU,eAAe,GAAG,MAAM;AAC5B,WAAOZ,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAE,OADQ;AAElBC,MAAAA,MAAM,EAAE;AAFU,KAAD,CAAnB;AAID,GALD;;AAOA,QAAMW,cAAc,GAAIC,QAAD,IAAc;AACnC,WAAOd,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAE,UADQ;AAElBC,MAAAA,MAAM,EAAE,OAFU;AAGlBC,MAAAA,IAAI,EAAEW;AAHY,KAAD,CAAnB;AAKD,GAND;;AAQA,QAAMC,YAAY,GAAIC,MAAD,IAAY;AAC/B,WAAOhB,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAE,iBADQ;AAElBC,MAAAA,MAAM,EAAE,OAFU;AAGlBC,MAAAA,IAAI,EAAEa;AAHY,KAAD,CAAnB;AAKD,GAND;;AAQA,QAAMC,UAAU,GAAIC,QAAD,IAAc;AAC/B,WAAOlB,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAE,OADQ;AAElBC,MAAAA,MAAM,EAAE,MAFU;AAGlBC,MAAAA,IAAI,EAAEe;AAHY,KAAD,CAAnB;AAKD,GAND;;AAQA,QAAMC,oBAAoB,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAChD,WAAOrB,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAG,eAAcmB,MAAO,EADd;AAElBlB,MAAAA,MAAM,EAAG,GAAEmB,OAAO,GAAG,QAAH,GAAc,KAAM;AAFpB,KAAD,CAAnB;AAID,GALD;;AAOA,QAAMC,UAAU,GAAIF,MAAD,IAAY;AAC7B,WAAOpB,YAAY,CAAC;AAClBC,MAAAA,QAAQ,EAAG,SAAQmB,MAAO,EADR;AAElBlB,MAAAA,MAAM,EAAE;AAFU,KAAD,CAAnB;AAID,GALD;AAMD;;KAhFQb,G;AAkFT,OAAO,MAAMkC,GAAG,GAAGlC,GAAG,CAAE;AACtBmC,EAAAA,OAAO,EAAE,mCADa;AAEtBC,EAAAA,KAAK,EAAE,sCAFe;AAGtBC,EAAAA,QAAQ,EAAE;AAHY,CAAF,CAAf","sourcesContent":["function Api({ _address, _token, _cohortId }) {\n\n  const _checkResponse = (res) => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  }\n\n  const _makeRequest = ({ endpoint, method, body }) => {\n    const fetchInit = {\n      method: method,  \n      headers: {\n        authorization: _token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch (\n      `${_address}/${_cohortId}/${endpoint}`,\n      body \n        ? { ...fetchInit, body: JSON.stringify(body) } \n        : fetchInit\n    )\n    .then (\n      _checkResponse\n    )\n  }\n\n  const getUserInfo = () => {\n    return _makeRequest({\n      endpoint: 'users/me', \n      method: 'GET'\n    });\n  }\n  \n  const getInitialCards = () => {\n    return _makeRequest({\n      endpoint: 'cards', \n      method: 'GET'\n    });\n  }\n\n  const updateUserInfo = (userInfo) => {\n    return _makeRequest({\n      endpoint: 'users/me', \n      method: 'PATCH',\n      body: userInfo\n    });\n  }\n\n  const updateAvatar = (avatar) => {\n    return _makeRequest({\n      endpoint: 'users/me/avatar', \n      method: 'PATCH',\n      body: avatar\n    });\n  }\n\n  const addNewCard = (cardData) => {\n    return _makeRequest({\n      endpoint: 'cards',\n      method: 'POST',\n      body: cardData\n    });\n  }\n\n  const changeLikeCardStatus = (cardID, isLiked) => {\n    return _makeRequest({\n      endpoint: `cards/likes/${cardID}`, \n      method: `${isLiked ? 'DELETE' : 'PUT'}`\n    });\n  }\n\n  const deleteCard = (cardID) => {\n    return _makeRequest({\n      endpoint: `cards/${cardID}`, \n      method: 'DELETE'\n    });\n  }\n}\n\nexport const api = Api ({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24',\n})"]},"metadata":{},"sourceType":"module"}