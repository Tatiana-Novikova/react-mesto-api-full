{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._handleResponse = response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return Promise.reject(response.status);\n      }\n    };\n\n    this.address = options.address;\n    this.token = options.token;\n    this.cohortId = options.cohortId;\n  }\n\n  _request(endpoint, method, body) {\n    const fetchInit = {\n      method: method,\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch(`${this.address}/${this.cohortId}/${endpoint}`, body ? { ...fetchInit,\n      body: JSON.stringify(body)\n    } : fetchInit).then(this._handleResponse);\n  }\n\n  getUserInfo() {\n    return this._request('users/me', 'GET');\n  }\n\n  getInitialCards() {\n    return this._request('cards', 'GET');\n  }\n\n  updateUserInfo(userInfo) {\n    return this._request('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar(avatar) {\n    return this._request('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard(cardData) {\n    return this._request('cards', 'POST', cardData);\n  }\n\n  likeCard(cardID, isLiked) {\n    return this._request(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard(cardID) {\n    return this._request(`cards/${cardID}`, 'DELETE');\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24'\n});\nexport default api;","map":{"version":3,"sources":["/Users/tatananovikova/Desktop/praktikum/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","_handleResponse","response","ok","json","Promise","reject","status","address","token","cohortId","_request","endpoint","method","body","fetchInit","headers","authorization","fetch","JSON","stringify","then","getUserInfo","getInitialCards","updateUserInfo","userInfo","updateAvatar","avatar","addNewCard","cardData","likeCard","cardID","isLiked","deleteCard","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,SAMrBC,eANqB,GAMFC,QAAD,IAAc;AAC9B,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,eAAOC,OAAO,CAACC,MAAR,CAAeJ,QAAQ,CAACK,MAAxB,CAAP;AACD;AACF,KAZoB;;AACnB,SAAKC,OAAL,GAAeR,OAAO,CAACQ,OAAvB;AACA,SAAKC,KAAL,GAAaT,OAAO,CAACS,KAArB;AACA,SAAKC,QAAL,GAAgBV,OAAO,CAACU,QAAxB;AACD;;AAUDC,EAAAA,QAAQ,CAAEC,QAAF,EAAYC,MAAZ,EAAoBC,IAApB,EAA0B;AAChC,UAAMC,SAAS,GAAG;AAChBF,MAAAA,MAAM,EAAEA,MADQ;AAEhBG,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,KAAKR,KADb;AAEP,wBAAgB;AAFT;AAFO,KAAlB;AAOA,WAAOS,KAAK,CACT,GAAE,KAAKV,OAAQ,IAAG,KAAKE,QAAS,IAAGE,QAAS,EADnC,EAEVE,IAAI,GAAG,EAAE,GAAGC,SAAL;AAAgBD,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAAtB,KAAH,GAAkDC,SAF5C,CAAL,CAGNM,IAHM,CAIL,KAAKpB,eAJA,CAAP;AAMD;;AAEDqB,EAAAA,WAAW,GAAI;AACb,WAAO,KAAKX,QAAL,CAAc,UAAd,EAA0B,KAA1B,CAAP;AACD;;AAEDY,EAAAA,eAAe,GAAI;AACjB,WAAO,KAAKZ,QAAL,CAAc,OAAd,EAAuB,KAAvB,CAAP;AACD;;AAEDa,EAAAA,cAAc,CAAEC,QAAF,EAAY;AACxB,WAAO,KAAKd,QAAL,CAAc,UAAd,EAA0B,OAA1B,EAAmCc,QAAnC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAEC,MAAF,EAAU;AACpB,WAAO,KAAKhB,QAAL,CAAc,iBAAd,EAAiC,OAAjC,EAA0CgB,MAA1C,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEC,QAAF,EAAY;AACpB,WAAO,KAAKlB,QAAL,CAAc,OAAd,EAAuB,MAAvB,EAA+BkB,QAA/B,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AACzB,WAAO,KAAKrB,QAAL,CAAe,eAAcoB,MAAO,EAApC,EAAuCC,OAAO,GAAG,QAAH,GAAc,KAA5D,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAAEF,MAAF,EAAU;AAClB,WAAO,KAAKpB,QAAL,CAAe,SAAQoB,MAAO,EAA9B,EAAiC,QAAjC,CAAP;AACD;;AAzDO;;AA4DV,MAAMG,GAAG,GAAG,IAAIpC,GAAJ,CAAS;AACnBU,EAAAA,OAAO,EAAE,mCADU;AAEnBC,EAAAA,KAAK,EAAE,sCAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAAT,CAAZ;AAMA,eAAewB,GAAf","sourcesContent":["class Api {\n  constructor(options) {\n    this.address = options.address;\n    this.token = options.token;\n    this.cohortId = options.cohortId;\n  }\n\n  _handleResponse = (response) => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      return Promise.reject(response.status);\n    }\n  }\n\n  _request (endpoint, method, body) {\n    const fetchInit = {\n      method: method,  \n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch (\n      `${this.address}/${this.cohortId}/${endpoint}`,\n      body ? { ...fetchInit, body: JSON.stringify(body) } : fetchInit)\n    .then (\n      this._handleResponse\n    )\n  }\n\n  getUserInfo () {\n    return this._request('users/me', 'GET');\n  }\n  \n  getInitialCards () {\n    return this._request('cards', 'GET');\n  }\n\n  updateUserInfo (userInfo) {\n    return this._request('users/me', 'PATCH', userInfo);\n  }\n\n  updateAvatar (avatar) {\n    return this._request('users/me/avatar', 'PATCH', avatar);\n  }\n\n  addNewCard (cardData) {\n    return this._request('cards', 'POST', cardData);\n  }\n\n  likeCard (cardID, isLiked) {\n    return this._request(`cards/likes/${cardID}`, isLiked ? 'DELETE' : 'PUT');\n  }\n\n  deleteCard (cardID) {\n    return this._request(`cards/${cardID}`, 'DELETE');\n  }\n}\n\nconst api = new Api ({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24',\n})\n\nexport default api"]},"metadata":{},"sourceType":"module"}