{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._token = options.token;\n    this._cohortId = options.cohortId;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  }\n\n  _makeRequest({\n    endpoint,\n    method,\n    body\n  }) {\n    const fetchInit = {\n      method: method,\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch(`${this._address}/${this._cohortId}/${endpoint}`, body ? { ...fetchInit,\n      body: JSON.stringify(body)\n    } : fetchInit).then(this._checkResponse);\n  }\n\n  getUserInfo() {\n    return this._makeRequest({\n      endpoint: 'users/me',\n      method: 'GET'\n    });\n  }\n\n  getInitialCards() {\n    return this._makeRequest({\n      endpoint: 'cards',\n      method: 'GET'\n    });\n  }\n\n  updateUserInfo(userInfo) {\n    return this._makeRequest({\n      endpoint: 'users/me',\n      method: 'PATCH',\n      body: userInfo\n    });\n  }\n\n  updateAvatar(avatar) {\n    return this._makeRequest({\n      endpoint: 'users/me/avatar',\n      method: 'PATCH',\n      body: avatar\n    });\n  }\n\n  addNewCard(cardData) {\n    return this._makeRequest({\n      endpoint: 'cards',\n      method: 'POST',\n      body: cardData\n    });\n  }\n\n  changeLikeCardStatus(cardID, isLiked) {\n    return this._makeRequest({\n      endpoint: `cards/likes/${cardID}`,\n      method: `${isLiked ? 'DELETE' : 'PUT'}`\n    });\n  }\n\n  deleteCard(cardID) {\n    return this._makeRequest({\n      endpoint: `cards/${cardID}`,\n      method: 'DELETE'\n    });\n  }\n\n}\n\nexport const api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24'\n});","map":{"version":3,"sources":["/Users/tatananovikova/Desktop/praktikum/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","options","_address","address","_token","token","_cohortId","cohortId","_checkResponse","res","ok","json","Promise","reject","status","_makeRequest","endpoint","method","body","fetchInit","headers","authorization","fetch","JSON","stringify","then","getUserInfo","getInitialCards","updateUserInfo","userInfo","updateAvatar","avatar","addNewCard","cardData","changeLikeCardStatus","cardID","isLiked","deleteCard","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._token = options.token;\n    this._cohortId = options.cohortId;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  }\n\n  _makeRequest ({ endpoint, method, body }) {\n    const fetchInit = {\n      method: method,  \n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    };\n    return fetch (\n      `${this._address}/${this._cohortId}/${endpoint}`,\n      body \n        ? { ...fetchInit, body: JSON.stringify(body) } \n        : fetchInit\n    )\n    .then (\n      this._checkResponse\n    )\n  }\n\n  getUserInfo () {\n    return this._makeRequest({\n      endpoint: 'users/me', \n      method: 'GET'\n    });\n  }\n  \n  getInitialCards () {\n    return this._makeRequest({\n      endpoint: 'cards', \n      method: 'GET'\n    });\n  }\n\n  updateUserInfo (userInfo) {\n    return this._makeRequest({\n      endpoint: 'users/me', \n      method: 'PATCH',\n      body: userInfo\n    });\n  }\n\n  updateAvatar (avatar) {\n    return this._makeRequest({\n      endpoint: 'users/me/avatar', \n      method: 'PATCH',\n      body: avatar\n    });\n  }\n\n  addNewCard (cardData) {\n    return this._makeRequest({\n      endpoint: 'cards',\n      method: 'POST',\n      body: cardData\n    });\n  }\n\n  changeLikeCardStatus (cardID, isLiked) {\n    return this._makeRequest({\n      endpoint: `cards/likes/${cardID}`, \n      method: `${isLiked ? 'DELETE' : 'PUT'}`\n    });\n  }\n\n  deleteCard (cardID) {\n    return this._makeRequest({\n      endpoint: `cards/${cardID}`, \n      method: 'DELETE'\n    });\n  }\n}\n\nexport const api = new Api ({\n  address: 'https://mesto.nomoreparties.co/v1',\n  token: 'c846985c-30b9-4d91-bdf7-4d0b3c99bbf7',\n  cohortId: 'cohort-24',\n})"]},"metadata":{},"sourceType":"module"}